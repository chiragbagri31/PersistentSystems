// Main.java
import com.spring.dao.EventDAO;
import com.spring.entity.Event;
import com.spring.entity.Hall;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.sql.SQLException;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Main 
{
	public static void main(String[] args) 
    {
		Logger log = Logger.getLogger("org.hibernate");
		log.setLevel(Level.OFF);
		System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
		
		ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
        EventDAO dao = context.getBean("eventDAO", EventDAO.class);

        Scanner sc = new Scanner(System.in);

        while(true) 
        {
            System.out.println("Select from the list\n" +
                    "1) Display Hall and Events\n" +
                    "2) Find Events\n" +
                    "3) Exit"
            );
            int p = Integer.parseInt(sc.nextLine());

            if(p == 3)
            {
                System.out.println("Thank you"); 
                break;
            }

            List<Event> list = null;
            switch (p) 
            {
                case 1:
                    list = dao.getAllEvents();
                    System.out.println("...Hall and Event List...");
                    System.out.printf("%-15s %-15s %-15s %-15s %-15s %s\n","Id","Event Name","Organiser Name","Organiser Number", "Hall Name", "Location");
                    for(Event e : list) 
                    {
                        System.out.print(e.toString());
                    }
                    break;
                case 2:
                    System.out.println("Enter the hall name to display events");
                    String hname = sc.nextLine();
                    Hall h = dao.findHallByName(hname);
                    if(h == null) 
                    {
                        System.out.println("No such hall");
                        break;
                    }
                    list = dao.findEventsByHallId(h.getId());
                    int count = 1;
                    for(Event e : list) 
                    {
                        System.out.println(count + ") " + e.getEventName()); count++;
                    }
                    break;

                default:
                    System.out.println("Invalid Choice");
            }
        }
	}
}




// applicationContext.xml
<beans xmlns="http://www.springframework.org/schema/beans" 
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:context="http://www.springframework.org/schema/context"
   xsi:schemaLocation="
      http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
      http://www.springframework.org/schema/context 
      http://www.springframework.org/schema/context/spring-context-3.1.xsd">
	
    <!-- <context:annotation-config/> -->
    <!-- <context:component-scan base-package="com.spring"/> -->
    <context:property-placeholder location="classpath:oracle.properties"/>

    
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="oracle.jdbc.OracleDriver" />
        <property name="url" value="${db.url}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.password}" />
    </bean>

    <bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <bean class="com.spring.dao.EventDAO" id="eventDAO">
        <property name="dataSource" ref="dataSource" />
    </bean>
</beans>




// Event.java
package com.spring.entity;

public class Event 
{
    private int id;
    private String eventName;
    private String organiser;
    private String organiserNumber;
    private Hall hall;

    public Event(){}

    public Event(int id,String eventName,String organiser,String organiserNumber,Hall hall) 
    {
        this.id = id;
        this.eventName = eventName;
        this.organiser = organiser;
        this.organiserNumber = organiserNumber;
        this.hall = hall;
    }

    // id getter and setter
    public void setId(int id) 
    {
        this.id = id;
    }
    public int getId()
    {
        return id;
    }
    
    // eventName getter and setter
    public void setEventName(String eventName) 
    {
        this.eventName = eventName;
    }
    public String getEventName() 
    {
        return eventName;
    }
    
    // organiser getter and setter
    public void setOrganiser(String organiser) 
    {
        this.organiser = organiser;
    }
    public String getOrganiser() 
    {
        return organiser;
    }
    
    // organiserNumber getter and setter
    public void setOrganiserNumber(String organiserNumber) 
    {
        this.organiserNumber = organiserNumber;
    }
    public String getOrganiserNumber() 
    {
        return organiserNumber;
    }
    
    // hall getter and setter
    public void setHall(Hall hall) 
    {
        this.hall = hall;
    }
    public Hall getHall() 
    {
        return hall;
    }
    
    @Override
    public String toString() 
    {
        return String.format("%-15s %-15s %-15s %-15s %-15s %s\n", id, eventName,organiser, organiserNumber, hall.getName(), hall.getLocation());
    }
}




// Hall.java
package com.spring.entity;

public class Hall 
{
    private int id;
    private String name;
    private String location;

    public Hall(){}

    public Hall(int id,String name,String location) 
    {
        this.id = id;
        this.name = name;
        this.location = location;
    }

    // id getter and setter
    public void setId(int id) 
    {
        this.id = id;
    }
    public int getId() 
    {
        return id;
    }
    
    // name getter and setter
    public void setName(String name) 
    {
        this.name = name;
    }
    public String getName()
    {
        return name;
    }
    
    // location getter and setter
    public void setLocation(String location) 
    {
        this.location = location;
    }
    public String getLocation() 
    {
        return location;
    }
}




// EventDAO.java
package com.spring.dao;

import com.spring.entity.*;
import java.sql.ResultSet;
import java.sql.Types;
import java.sql.SQLException;
import java.util.*;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import javax.sql.DataSource;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Component;

@Component("eventDAO")
public class EventDAO 
{ 
    @Autowired
    private DataSource datasource;
    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    public DataSource getDataSource()
    {
        return datasource;
    }
    public void setDataSource(DataSource dataSource)
    {
        this.jdbcTemplate= new JdbcTemplate(dataSource);
    }
    
    // to return list of all events
	public List<Event> getAllEvents()
	{
       	try
		{ 
			String SQL = "select * from event e inner join hall h on e.hall_id=h.id";
			List <Event> events = jdbcTemplate.query(SQL,new EventMapper());
			return events;
       	}
       	catch(EmptyResultDataAccessException e)
	   	{
         	return new ArrayList<Event>();
       	}
    }

    // to return hall details by using id
    public Hall getHallDetail(int id)
    {
    	try 
        {
		    String SQL = "select * from hall where id ="+ id;
		    return jdbcTemplate.queryForObject(SQL,new HallMapper());
    	}
    	catch(EmptyResultDataAccessException e) 
        {
    		return null;
    	}
    }
    
    // to find hall by using name
    public Hall findHallByName(String name)
	{
    	try 
		{
			String SQL = "select * from hall where name like '"+name+"'";
			Hall hall = jdbcTemplate.queryForObject(SQL,new HallMapper());
		    return hall;
		}
		catch(EmptyResultDataAccessException e) 
		{
			return null;
		}
    }

    // to find event by using hall id
    public List<Event> findEventsByHallId(int hallId)
    {
		String SQL = "select * from event e inner join hall h on e.hall_id = h.id where h.id="+hallId;
		return jdbcTemplate.query(SQL,new EventMapper());
    }
    
}

// HallMapper Class
final class HallMapper implements RowMapper<Hall> 
{
    public Hall mapRow(ResultSet rs, int rowNum) throws SQLException 
    {
        Hall hall = new Hall();
        hall.setId(rs.getInt("id"));
        hall.setName(rs.getString("name"));
        hall.setLocation(rs.getString("location"));
        return hall;
    }
}

// EventMapper class
final class EventMapper implements RowMapper<Event>
{
    public Event mapRow(ResultSet rs, int rowNum) throws SQLException 
	{
        Event event= new Event();
        event.setId(rs.getInt("id"));
        event.setEventName(rs.getString("event_name"));
        event.setOrganiser(rs.getString("organiser"));
        event.setOrganiserNumber(rs.getString("organiser_number"));
        event.setHall(new Hall(rs.getInt("hall_id"),rs.getString("name"),rs.getString("location")));
        return event;
    }
}
